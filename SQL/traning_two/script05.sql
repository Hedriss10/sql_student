-- entendo o join
SELECT 
    CUSTOMER.CUSTOMER_ID,
    ORDER_DATE,
    SHIP_DATE,
    NAME,
    STREET_ADDRESS,
    CITY,
    STATE,
    ZIP,
    PRODUCT_ID,
    ORDER_QTY
FROM CUSTOMER LEFT JOIN CUSTOMER_ORDER ON CUSTOMER.CUSTOMER_ID = CUSTOMER_ORDER.CUSTOMER_ID



-- encontrando clientes n√£o tem pedidos e buscando valores nulos 
SELECT
    CUSTOMER.CUSTOMER_ID,
    NAME AS CUSTOMER_NAME
FROM CUSTOMER LEFT JOIN CUSTOMER_ORDER ON CUSTOMER.CUSTOMER_ID = CUSTOMER_ORDER.CUSTOMER_ID
WHERE ORDER_ID IS NULL;

-- selecionando o produto_id com customer_id
SELECT
    ORDER_ID,
    CUSTOMER.CUSTOMER_ID,
    NAME AS CUSTOMER_NAME,
    STREET_ADDRESS,
    CITY,
    STATE,
    ZIP,
    ORDER_DATE,
    PRODUCT.PRODUCT_ID,
    DESCRIPTION,
    ORDER_QTY * PRICE AS REVENUE 
FROM CUSTOMER
INNER JOIN CUSTOMER_ORDER ON CUSTOMER.CUSTOMER_ID =  CUSTOMER.CUSTOMER_ID
INNER JOIN PRODUCT ON CUSTOMER_ORDER.PRODUCT_ID = PRODUCT.PRODUCT_ID;




-- agrupando os joins 
SELECT 
    CUSTOMER.CUSTOMER_ID,
    NAME AS CUSTOMER_NAME, 
    SUM(ORDER_QTY * PRICE ) AS TOTAL_REVENUE 
FROM CUSTOMER_ORDER
LEFT JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID =  CUSTOMER_ORDER.CUSTOMER_ID
LEFT JOIN PRODUCT ON CUSTOMER_ORDER.PRODUCT_ID =  PRODUCT.PRODUCT_ID
GROUP BY 1, 2




/* 
    Usando o left ou inner join podemos agrupar e forma mais suave e que trate os dados da forma correta 
    usando o coalesce podemos utilizar e trtat os valore nulos com 0
*/
SELECT 
    CUSTOMER.CUSTOMER_ID,
    NAME AS CUSTOMER_NAME,
    COALESCE(SUM(ORDER_QTY * PRICE), 0) AS TOTAL_REVENUE
FROM CUSTOMER_ORDER
LEFT JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID =  CUSTOMER_ORDER.CUSTOMER_ID
LEFT JOIN PRODUCT ON CUSTOMER_ORDER.PRODUCT_ID = PRODUCT.PRODUCT_ID
GROUP BY 1, 2 





SELECT * FROM PRODUCT